import json
from django.http import JsonResponse
from django.core.serializers.json import DjangoJSONEncoder
from tobar.models import Well, Post

def mapper(request):
    mapbox_access_token = 'pk.my_mapbox_access_token'
    wells = list(Well.objects.all().values())

    transposed_wells = []
    for well in wells:
        # Fetch related 'Post' records for each 'Well'
        related_posts = Post.objects.filter(well=well['id'])
        post_titles = [post.title for post in related_posts]

        output = {
            "type": "Feature",
            "properties": {
                "title": well['well'],
                "posts": post_titles  # Include the 'title' field from related 'Post' records
            },
            "geometry": {
                "coordinates": [float(well['longitude']), float(well['latitude'])],
                "type": "Point"
            }
        }
        transposed_wells.append(output)

    json_wells = json.dumps(list(transposed_wells), cls=DjangoJSONEncoder)

    return render(request, 'map.html', {'mapbox_access_token': mapbox_access_token, 'wells': json_wells})


'map'

class Well(models.Model):
    well = models.CharField(max_length=100)
    townland = models.CharField(max_length=100)
    county = models.CharField(max_length=100)
    longitude = models.DecimalField(max_digits=8, decimal_places=4)
    latitude = models.DecimalField(max_digits=8, decimal_places=4)
    cures = models.CharField(max_length=100)

    def __str__(self):
        return self.well


'tobar'

class Post(models.Model):
    title = models.CharField(max_length=100)
    well = models.ForeignKey(
        Well, on_delete=models.CASCADE, related_name='wells', default='1')
    slug = models.SlugField(max_length=200, unique=True)
    author = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name='tobar_posts')
    featured_image = CloudinaryField('image', default='placeholder')
    cures = models.CharField(max_length=100)
    location = models.CharField(max_length=100)
    excerpt = models.TextField(blank=True)
    updated_on = models.DateTimeField(auto_now=True)
    content = models.TextField()
    created_on = models.DateTimeField(auto_now_add=True)
    status = models.IntegerField(choices=STATUS, default=0)
    likes = models.ManyToManyField(
        User, related_name='tobarpost_like', blank=True)

    class Meta:
        ordering = ["-created_on"]

    def __str__(self):
        return self.title

    def number_of_likes(self):
        return self.likes.count()


as you can see the FK relationship is nn the 'well' field in 'Post' model


Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Urna nunc id cursus metus aliquam eleifend mi in nulla. Nec sagittis aliquam malesuada bibendum arcu vitae elementum. Sit amet cursus sit amet dictum sit. Suscipit tellus mauris a diam maecenas sed enim. Suspendisse potenti nullam ac tortor vitae purus faucibus ornare. 









Rephrasing the last question: The json data is getting to map.js and I need to modify the last line here to incorporate that for sending to the html.template
    map.on('click', 'points', function (e) {

        var title = e.features[0].properties.title;
        var post_url = e.features[0].properties.post_url;
        var coordinates = e.features[0].geometry.coordinates.slice();
        var r_coordinates = coordinates.slice().reverse(); //for exporting to google maps

        var url = 'popup?title=' + encodeURIComponent(title) + '&coordinates=' + encodeURIComponent(r_coordinates.map(coord => Math.ceil(coord * 100000) / 100000).join(','));


Can you do that withoug any additional lines. Just using the 'var url =' line above.